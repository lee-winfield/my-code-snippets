{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:Label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Context Provider TypeScript": {
		"prefix": "cpts",
		"body": [
			"import React, { useState } from 'react'",
			"",
			"export interface $1StateInterface {",
			"}",
			"export interface $1StateModifiersInterface {",
			"}",
			"",
			"export const $1State = React.createContext<$1StateInterface>({})",
			"export const $1StateModifiers = React.createContext<$1StateModifiersInterface>({})",
			"",
			"const $1ContextProvider: React.SFC<any> = (props: any) => {",
			"\tconst [ state, stateModifier ] = useState(null)",
			"",
			"\treturn (",
			"\t\t<$1State.Provider value={{ state }}>",
			"\t\t\t<$1StateModifiers.Provider value={{ stateModifier }}>",
			"\t\t\t\t{props.children}",
			"\t\t\t</$1StateModifiers.Provider>",
			"\t\t</$1State.Provider>",
			"\t)",
			"}",
			"",
			"export default $1ContextProvider;",
		],
		"description": "Creates a React Context Provider in TypeScript"
	},
	"Context Provider With Reducer TypeScript": {
		"prefix": "cpwrts",
		"body": [
			"import React, { useReducer, Dispatch } from 'react'",
			"",
			"export const SOME_ACTION = 'SOME_ACTION'",
			"export const SOME_OTHER_ACTION = 'SOME_OTHER_ACTION'",
			"",
			"export interface ${1:Label}StateInterface {",
			"",
			"}",
			"",
			"export interface ${1:Label}Action {",
			"\ttype: string,",
			"}",
			"",
			"const initialState = {}",
			"",
			"const ${1:Label}State = React.createContext<${1:Label}StateInterface>(initialState)",
			"const ${1:Label}Dispatch = React.createContext<React.Dispatch<${1:Label}Action> | undefined>(undefined)",
			"",
			"const ${1:Label}ContextProvider: React.SFC<any> = (props: any) => {",
			"\tconst reducer = (state: ${1:Label}StateInterface, action: ${1:Label}Action): ${1:Label}StateInterface => {",
			"\t\tswitch (action.type) {",
			"\t\t\tcase SOME_ACTION: {",
			"\t\t\t\treturn initialState",
			"\t\t\t}",
			"\t\t\tcase SOME_OTHER_ACTION: {",
			"\t\t\t\treturn state",
			"\t\t\t}",
			"\t\t\tdefault: {",
			"\t\t\t\tthrow new Error(`Unhandled action type: ${action.type}`)",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"\tconst [state, dispatch] = useReducer(reducer, initialState)",
			"",
			"\treturn (",
			"\t\t<${1:Label}State.Provider value={state}>",
			"\t\t\t<${1:Label}Dispatch.Provider value={dispatch}>",
			"\t\t\t\t{props.children}",
			"\t\t\t</${1:Label}Dispatch.Provider>",
			"\t\t</${1:Label}State.Provider>",
			"\t)",
			"}",
			"",
			"export const use${1:Label}State = (): ${1:Label}StateInterface => {",
			"\tconst context = React.useContext(${1:Label}State)",
			"\tif (context === undefined) {",
			"\t\tthrow new Error('use${1:Label}State must be used within a ${1:Label}ContextProvider')",
			"\t}",
			"\treturn context",
			"}",
			"",
			"export const use${1:Label}Dispatch = (): Dispatch<${1:Label}Action> => {",
			"\tconst context = React.useContext(${1:Label}Dispatch)",
			"\tif (context === undefined) {",
			"\t\tthrow new Error('use${1:Label}Dispatch must be used within a ${1:Label}ContextProvider')",
			"\t}",
			"\treturn context",
			"}",
			"",
			"export default ${1:Label}ContextProvider;",
		],
		"description": "Creates a React Context Provider with Reducer in TypeScript"
	}
}